name: ci
on:
  push:
    branches:
      - 'main'
  pull_request:
    branches:
      - '*'

jobs:
  test_and_lint:
    runs-on: ubuntu-latest
    # strategy:
    #   matrix:
    #     go: [ '1.18', '1.19', '1.20' ]
    steps:
      - name: Setup Go
        uses: actions/setup-go@v2
        with:
          go-version: '^1.16'
      - name: Check code
        uses: actions/checkout@v2

      - name: Run go mod tidy on all modules
        run: find . -name go.mod -execdir go mod tidy \;
      # If there are any diffs from goimports or go mod tidy, fail.
      - name: Verify no changes from goimports and go mod tidy.
        run: |
          if [ -n "$(git status --porcelain)" ]; then
            echo 'To fix this check, run "goimports -w . && find . -name go.mod -execdir go mod tidy \;"'
            git status # Show the files that failed to pass the check.
            exit 1
          fi
      - name: go vet
        # Use find to build all modules. '-execdir ... ;' doesn't set an exit code
        # based on command results. So, create a file if a build fails and check
        # if the file exists to set the right exit code.
        run: |
          ROOT_DIR=$(pwd) \
          find . -name go.mod -execdir sh -c 'go vet ./... || touch $ROOT_DIR/vet_failed.txt' \; ; \
          test ! -f vet_failed.txt
      - name: Build code
        # Use find to build all modules. '-execdir ... ;' doesn't set an exit code
        # based on command results. So, create a file if a build fails and check
        # if the file exists to set the right exit code.
        run: |
          ROOT_DIR=$(pwd) \
          find . -name go.mod -execdir sh -c 'go build ./... || touch $ROOT_DIR/build_failed.txt' \; ; \
          test ! -f build_failed.txt
      - name: shellcheck
        run: find . -name "*.sh" -exec shellcheck {} \;
        
      - name: Lint
        run: |
          go vet -v ./...
          go mod tidy

      - name: Test
        run: go test -v ./...